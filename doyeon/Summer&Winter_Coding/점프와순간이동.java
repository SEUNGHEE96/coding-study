import java.util.*;

public class Solution {
    public int solution(int n) {
        int ans = 0;
        
        // n이 2가 될 때까지 반복
        while (n - 1 != 1 && n != 1) {
            // 짝수인 경우 계속 2로 나누기
            if (n % 2 == 0) {
                n = n / 2;
            }
            
            // 홀수인 경우 -1 하여 짝수로 만들어 주기
            if (n % 2 != 0) {
                // -1할 때는 1칸 점프한 것으로 생각
                ans++;
                n--;
            }
        } 
        
        // 맨 처음 1 점프한 것 추가
        ans++;

        return ans;
    }
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.02ms, 75.1MB)
// 테스트 2 〉	통과 (0.01ms, 72.4MB)
// 테스트 3 〉	통과 (0.01ms, 69.9MB)
// 테스트 4 〉	통과 (0.02ms, 74.6MB)
// 테스트 5 〉	통과 (0.02ms, 75.9MB)
// 테스트 6 〉	통과 (0.02ms, 67.1MB)
// 테스트 7 〉	통과 (0.02ms, 75.9MB)
// 테스트 8 〉	통과 (0.02ms, 73.4MB)
// 테스트 9 〉	통과 (0.03ms, 78.8MB)
// 테스트 10 〉	통과 (0.04ms, 72MB)
// 테스트 11 〉	통과 (0.02ms, 75.5MB)
// 테스트 12 〉	통과 (0.01ms, 75MB)
// 테스트 13 〉	통과 (0.02ms, 85MB)
// 테스트 14 〉	통과 (0.02ms, 76.1MB)
// 테스트 15 〉	통과 (0.02ms, 75.3MB)
// 테스트 16 〉	통과 (0.02ms, 78.3MB)
// 테스트 17 〉	통과 (0.02ms, 76.1MB)
// 테스트 18 〉	통과 (0.01ms, 76.9MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.02ms, 51.9MB)
// 테스트 2 〉	통과 (0.02ms, 52.8MB)
// 테스트 3 〉	통과 (0.02ms, 52.2MB)
// 테스트 4 〉	통과 (0.02ms, 51.6MB)
// 테스트 5 〉	통과 (0.02ms, 60MB)
// 테스트 6 〉	통과 (0.02ms, 52.4MB)
// 테스트 7 〉	통과 (0.02ms, 52.3MB)
// 테스트 8 〉	통과 (0.02ms, 51.8MB)
// 테스트 9 〉	통과 (0.02ms, 52.1MB)
// 테스트 10 〉	통과 (0.02ms, 52MB)