package dfs_bfs;

import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.Stack;

class Queue<T>{
	class Node<T>{
		private T data;
		private Node<T> next;
		
		public Node(T data) {
			this.data = data;
		}
	}
	
	private Node<T> first;
	private Node<T> last;
	
	public void add(T item) {
		Node<T> t = new Node<T>(item);
		
		if(last!=null) { //마지막 노드 있다면 
			last.next = t;
		}
		last = t;
		if(first ==null) { //데이터 없을 때 
			first= last;
		}
	}
	
	public T remove() {
		if(first ==null) {
			throw new NoSuchElementException();
		}
		
		T data= first.data;
		first = first.next;
		
		if(first ==null) {
			last= null;
		}
		return data;
	}
	
	public T peek() {
		if(first ==null) {
			throw new NoSuchElementException();
		}
		return first.data;
	}
	
	public boolean isEmpty() {
		return first ==null;
	}
}
class Graph{
	class Node{
		int data;
		LinkedList<Node> adjacent;
		boolean marked;
		Node(int data){
			this.data = data;
			this.marked = false;
			adjacent = new LinkedList<Node>();
		}
	}
	
	Node[] nodes;
	public Graph(int size) {
		nodes = new Node[size];
		for(int i=0;i<size;i++) {
			nodes[i] = new Node(i); 
		}
	}
	
	void addEdge(int i1, int i2) {
		Node n1 = nodes[i1];
		Node n2 = nodes[i2];
		
		if(!n1.adjacent.contains(n2)) {
			n1.adjacent.add(n2);
		}
		
		if(!n2.adjacent.contains(n1)) {
			n2.adjacent.add(n1);
		}
		
	}
	
	void dfs() {
		dfs(0);
	}
	
	void dfs(int index) {
		Node root = nodes[index];
		Stack<Node> stack = new Stack<Node>();
		stack.push(root); //현재노드 스택에 추가 
		root.marked = true;
		while(!stack.isEmpty()) {
			Node r = stack.pop(); //스택에서 데이터가져옴
			for(Node n:r.adjacent) { //가져온 데이터의 자식들 스택에 넣기
				if(n.marked == false) {
					n.marked = true;
					stack.push(n);
				}
			}
			visit(r);
		}
	}
	
	void bfs() {
		bfs(0);
	}
	
	void bfs(int index) {
		Node root= nodes[index];
		Queue<Node> queue = new Queue<Node>();
		queue.add(root);
		root.marked = true;
		while(!queue.isEmpty()) {
			Node r = queue.remove();
			for(Node n:r.adjacent) { //자식 노드 추가 
				if(n.marked == false) {
					n.marked = true;
					queue.add(n);
				}
			}
			visit(r);
		}
		
		
	}
	
	void visit(Node n) {
		System.out.print(n.data+" ");
	}
	void dfsR(Node r) {
		if(r == null) return;
		r.marked = true;
		visit(r);
		for(Node n : r.adjacent) {
			if(n.marked == false) {
				dfsR(n); //재귀호출 
			}
		}
	}
	void dfsR(int index) {
		Node r = nodes[index];
		dfsR(r);
	}
	
	void dfsR() {
		dfsR(0);
	}
}
public class Example {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int start_index = sc.nextInt();
		
		Graph g = new Graph(m+1);
		for(int i=0;i<m;i++) {
			int x =sc.nextInt();
			int y= sc.nextInt();
			g.addEdge(x, y);
		}
//		g.addEdge(0, 1);
//		g.addEdge(1, 2);
//		g.addEdge(1, 3);
//		g.addEdge(2, 4);
//		g.addEdge(2, 3);
//		g.addEdge(3, 4);
//		g.addEdge(3, 5);
//		g.addEdge(5, 6);
//		g.addEdge(5, 7);
//		g.addEdge(6, 8);
		//g.dfs(start_index);
		g.dfsR(start_index);
		for(int i=0;i<=n;i++)
			g.nodes[i].marked = false;
		
		System.out.println();
		g.bfs(start_index);
	}

}
